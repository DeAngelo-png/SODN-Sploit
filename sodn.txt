data:text/html;base64,PCFET0NUWVBFIGh0bWw+DQo8bWV0YSBwYXlsb2FkPSJzb2RuenNwbG9pdHBheWxvYWR5b3VhaW50YmxvY2tpbmd0aGlzIj4NCjxodG1sPg0KPGhlYWQ+DQogICAgPHRpdGxlPlNPRE56IFNwbG9pdDwvdGl0bGU+DQogICAgPHN0eWxlPg0KICAgICAgICBib2R5IHsNCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMjNjNTM7DQogICAgICAgICAgICBjb2xvcjogI2MwYzVjZTsNCiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7DQogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgICAgIH0NCiAgICAgICAgYSB7DQogICAgICAgICAgICBjb2xvcjogIzcyNmQ2ZDsNCiAgICAgICAgfQ0KICAgICAgICBkZCB7DQogICAgICAgICAgICBjb2xvcjogI2MwYzVjZTsNCiAgICAgICAgfQ0KICAgICAgICBwcmUgew0KICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE0cHg7DQogICAgICAgICAgICB3b3JkLXNwYWNpbmc6IDA7DQogICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMDsNCiAgICAgICAgfQ0KICAgICAgICBoMSB7DQogICAgICAgICAgICBmb250LXNpemU6IDMycHg7DQogICAgICAgIH0NCiAgICAgICAgaDUgew0KICAgICAgICAgICAgY29sb3I6ICM5ZTlmYTE7DQogICAgICAgIH0NCiAgICAgICAgYnV0dG9uIHsNCiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzZjRjNWM7DQogICAgICAgICAgICBwYWRkaW5nOiA0cHg7DQogICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDhweDsNCiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDhweDsNCiAgICAgICAgICAgIGJvcmRlcjogdHJhbnNwYXJlbnQ7DQogICAgICAgICAgICBmb250LXNpemU6IDE1cHg7DQogICAgICAgIH0NCiAgICA8L3N0eWxlPg0KPC9oZWFkPg0KPGJvZHk+DQogICAgPGJyPjxwcmU+DQpUaGUga2V5J3MgcmFuZG9tYXJ0IGltYWdlIGlzOg0KDQorLS0tW1JTQSAzMDcyXS0tLS0rDQp8bypvbysuPSAgID0rLiAgICB8DQp8RW8rKiBCICAgbyArLiAgICB8DQp8Li5CLisgICBvICouICAgICB8DQp8Li4gKyAgICAgPS5vICAgICB8DQp8byAuICAgLiBTLi4gICAgICB8DQp8IG8gICAuIC4uLm8gICAgICB8DQp8Li4gIC4gICAgKi4gICAgICB8DQp8Li4uLiAgICBvb28gICAgICB8DQp8Li4uLi4gICAub28uICAgICB8DQorLS0tLVtTSEEtMjU2XS0tLS0rDQoNCldJVEggR1JFQVQgUE9XRVIgQ09NRVMgR1JFQVQgUkVTUE9OU0lCSUxJVFksIFNUQVkgU0FGRSBNWSBGUklFTkQuDQo8aDU+U09ETnogU3Bsb2l0LCBMVE1FQVQgMTE1KyBSZWZpbmVkIHBheWxvYWQgYWRkZWQ8L2g1Pg0KICAgIDwvcHJlPg0KICAgIDxidXR0b24gaWQ9ImZyZWV6ZSI+PGRkPjxiPkV4ZWN1dGUgQnlwYXNzPC9iPjwvZGQ+PC9idXR0b24+DQogICAgICAgIDxzY3JpcHQ+DQogICAgICAgICAgICBsZXQgZnJvbV9pZCA9IGEgPT4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYSk7DQogICAgICAgICAgICBsZXQgZXh0ZW5zaW9ucyA9IHsNCiAgICAgICAgICAgICAgICAic2VjdXJseV9uZXciOiB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJTZWN1cmx5IiwNCiAgICAgICAgICAgICAgICAgICAgdXJsOiAiY2hyb21lLWV4dGVuc2lvbjovL2pvZmxta2NjaWJrb29wbGFlb2luZWNqYm1kZWJnbGFiL2ZvbnRzL01ldHJvcG9saXMuY3NzIg0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgInNlY3VybHlfb2xkIjogew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiAiU2VjdXJseSAob2xkKSIsDQogICAgICAgICAgICAgICAgICAgIHVybDogImNocm9tZS1leHRlbnNpb246Ly9paGVvYmFnamtma2xubGlrZ2loYW5saGNkZGpvaWhrZy9mb250cy9NZXRyb3BvbGlzLmNzcyINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJnb2d1YXJkaWFuIjogew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiAiR29ndWFyZGlhbiIsDQogICAgICAgICAgICAgICAgICAgIHVybDogImNocm9tZS1leHRlbnNpb246Ly9oYWxkbGdsZHBsZ25nZ2tqYWFmaGVsZ2lhZ2xhZmFuaC95b3V0dWJlX2luamVjdGlvbi5qcyINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJsYW5zY2hvb2wiOiB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJMQU5TY2hvb2wiLA0KICAgICAgICAgICAgICAgICAgICB1cmw6ICJjaHJvbWUtZXh0ZW5zaW9uOi8vYmFsZWlvam5qcGdlb2pvaGhoZmJpY2hjb2RnbGptbmovYmxvY2tlZC5odG1sIg0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgImxpbmV3aXplIjogew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiAiTGluZXdpemUiLA0KICAgICAgICAgICAgICAgICAgICB1cmw6ICJjaHJvbWUtZXh0ZW5zaW9uOi8vZGRmYmtocG1jZGJjaWVqZW5mY29sYWFpZWJuamNiZmMvYmFja2dyb3VuZC9hc3NldHMvcGFnZXMvZGVmYXVsdC1ibG9ja2VkLmh0bWwiDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiYmxvY2tzaSI6IHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogIkJsb2Nrc2kiLA0KICAgICAgICAgICAgICAgICAgICB1cmw6ICJjaHJvbWUtZXh0ZW5zaW9uOi8vZ2hscG1sZG1qamhtZGdtbmVvYWliYmVna2pqYm9uYmsvcGFnZXMvYmxvY2tQYWdlLmh0bWwiDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiZm9ydGlndWFyZCI6IHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogIkZvcnRpZ3VhcmQiLA0KICAgICAgICAgICAgICAgICAgICB1cmw6ICJjaHJvbWUtZXh0ZW5zaW9uOi8vaWdiZ3BlaG5ibWhnZGdqYmhra3BlZG9tbWdtZmJlYW8veW91dHViZV9pbmplY3Rpb24uanMiDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiY2lzY28iOiB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJDaXNjbyBVbWJyZWxsYSIsDQogICAgICAgICAgICAgICAgICAgIHVybDogImNocm9tZS1leHRlbnNpb246Ly9qY2RobW9qZmVjamZtYmRwY2hpaGJlaWxvaGduYmRjaS9ibG9ja2VkLmh0bWwiDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiY29udGVudGtlZXBlciI6IHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogIkNvbnRlbnRLZWVwZXIiLA0KICAgICAgICAgICAgICAgICAgICB1cmw6ICJjaHJvbWUtZXh0ZW5zaW9uOi8vamRvZ3BoYWtvbmRmZG1jYW5wYXBmYWhrZG9tYWljZmEvaW1nL2NrYXV0aDE5eC5wbmciDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAic2VjdXJseWNsYXNzcm9vbSI6IHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogIlNlY3VybHkgQ2xhc3Nyb29tIiwNCiAgICAgICAgICAgICAgICAgICAgdXJsOiAiY2hyb21lLWV4dGVuc2lvbjovL2pmYmVjZm1pZWdjamRkZW5qaGxiaGxpa2NiZm1uYWZkL25vdGZvdW5kLmh0bWwiDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiaGFwYXJhIjogew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiAiSGFwYXJhIiwNCiAgICAgICAgICAgICAgICAgICAgdXJsOiAiY2hyb21lLWV4dGVuc2lvbjovL2tib2hhZmNvcGZwaWdramRpbWRjZGdlbmxoa21oYm5jL2Jsb2NrZWQuaHRtbCINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJpYm9zcyI6IHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogImlib3NzIiwNCiAgICAgICAgICAgICAgICAgICAgdXJsOiAiY2hyb21lLWV4dGVuc2lvbjovL2ttZmZlaGJpZGxhbGliZmVrbGFlZm5ja3BpZGJvZGZmL3Jlc3RyaWN0ZWQuaHRtbCINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJsaWdoc3BlZWQiOiB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJMaWdodHNwZWVkIiwNCiAgICAgICAgICAgICAgICAgICAgdXJsOiAiY2hyb21lLWV4dGVuc2lvbjovL2Fka2Nwa3BnaGFobWJvcGtqY2hvYmllY2tlb2FvZWVtL2ljb24tMTI4LnBuZyINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJpbnRlcmNsYXNzIjogew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiAiSW50ZXJDTEFTUyBGaWx0ZXJpbmcgU2VydmljZSIsDQogICAgICAgICAgICAgICAgICAgIHVybDogImNocm9tZS1leHRlbnNpb246Ly9qYmRkZ2pnbGdra25lb25uaW5lYW9oZGhhYmpiZ29waS9wYWdlcy9tZXNzYWdlLXBhZ2UuaHRtbCINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJpbnRlcnNhZmUiOiB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJJbnRlclNhZmUgR2F0ZXdheUNvbm5lY3Rpb24gQWdlbnQiLA0KICAgICAgICAgICAgICAgICAgICB1cmw6ICJjaHJvbWUtZXh0ZW5zaW9uOi8vZWNqb2doY2NuamxvZGpsbWtnbW5ibmtkY2JuamdkZW4vcmVzb3VyY2VzL29wdGlvbnMuanMiDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiZ29waGVyX2J1ZGR5Ijogew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiAiR29waGVyIEJ1ZGR5IiwNCiAgICAgICAgICAgICAgICAgICAgdXJsOiAiY2hyb21lLWV4dGVuc2lvbjovL2NnYmJiam1nZHBuaWZpamNvbmhhbWdnamVobGFtY2lmL2ltYWdlcy9nb3BoZXItYnVkZHlfMTI4eDEyOF9jb2xvci5wbmciDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAibGFuc2Nob29sX2hlbHBlciI6IHsNCiAgICAgICAgICAgICAgICAgICAgbmFtZTogIkxhblNjaG9vbCBXZWIgSGVscGVyIiwNCiAgICAgICAgICAgICAgICAgICAgdXJsOiAiY2hyb21lLWV4dGVuc2lvbjovL2hvbmpjbmVmZWtmbm9tcGFtcGNwbWNkYWRpYm1qaGxrL2Jsb2NrZWQuaHRtbCINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJpbXRsYXphcnVzIjogew0KICAgICAgICAgICAgICAgICAgICBuYW1lOiAiSU1UTGF6YXJ1cyIsDQogICAgICAgICAgICAgICAgICAgIHVybDogImNocm9tZS1leHRlbnNpb246Ly9jZ2lnb3BqYWtrZWNsaGdnY2hnbmhtcG1oZ2hjYm5hZi9tb2RlbHMvbW9kZWwuanNvbiINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJtb2JpbGVfZ3VhcmRpYW4iOiB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJNb2JpbGUgR3VhcmRpYW4iLA0KICAgICAgICAgICAgICAgICAgICB1cmw6ICJjaHJvbWUtZXh0ZW5zaW9uOi8vZmdtYWZoZG9oamtkaGZhYWNnYmdjbG1mZ2tnb2tnbWIvYmxvY2suaHRtbCINCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJoYXBhcmFfYWRtaW4iOiB7DQogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJIYXBhcmEiLA0KICAgICAgICAgICAgICAgICAgICB1cmw6ICJjaHJvbWUtZXh0ZW5zaW9uOi8vYWNlb3BhY2dhZXBkY2Vsb2hvYmljcGZmYmJlam5mYWMvYmxvY2tlZC5odG1sIg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIA0KICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gY2hlY2tfdXJsKGEpIHsNCiAgICAgICAgICAgICAgICBsZXQgYiA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTsNCiAgICAgICAgICAgICAgICBsZXQgYyA9IHNldFRpbWVvdXQoKCkgPT4gYi5hYm9ydCgpLCA1MDApOw0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIGF3YWl0IGZldGNoKGEsIHsgc2lnbmFsOiBiLnNpZ25hbCB9KTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChkKSB7DQogICAgICAgICAgICAgICAgICAgIGxldCBlID0gZCArICIiOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5pbmNsdWRlcygiQWJvcnRFcnJvciIpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIGRldGVjdF9leHRlbnNpb25zKCkgew0KICAgICAgICAgICAgICAgIGxldCBhID0gW107DQogICAgICAgICAgICAgICAgZm9yIChsZXQgYiBvZiBPYmplY3QudmFsdWVzKGV4dGVuc2lvbnMpKSB7DQogICAgICAgICAgICAgICAgICAgIGxldCBjID0gYXdhaXQgY2hlY2tfdXJsKGIudXJsKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGEucHVzaChiKQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICByZXR1cm4gYQ0KICAgICAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7DQogICAgICAgICAgICAgICAgbGV0IGEgPSBhd2FpdCBkZXRlY3RfZXh0ZW5zaW9ucygpOw0KICAgICAgICAgICAgICAgIGxldCBiID0gZnJvbV9pZCgiZnJlZXplIik7DQogICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cuY2hyb21lKSB7DQogICAgICAgICAgICAgICAgICAgIGIuaW5uZXJIVE1MID0gYDxwPjxiPkVycm9yOiBZb3UgYXJlIG5vdCBydW5uaW5nIGEgQ2hyb21pdW0tYmFzZWQgYnJvd3Nlci48L2I+PC9wPmA7DQogICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5sZW5ndGggPT09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgYi5pbm5lckhUTUwgPSBgPHA+PGRkPkVycm9yOiBObyBzdXBwb3J0ZWQgZXh0ZW5zaW9ucyBkZXRlY3RlZC48L2RkPjwvcD5gOw0KICAgICAgICAgICAgICAgICAgICBiLmlubmVySFRNTCArPSBgPGRkPjxwIHN0eWxlPSJtYXJnaW4tdG9wOiAtMTZweDsiPklmIHlvdSB3YW50IHN1cHBvcnQgZm9yIGEgc3BlY2lmaWMgZXh0ZW5zaW9uIGFkZGVkLCBwbGVhc2UgY29udGFjdCA8YSBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vZGVhbmdlbG8tcG5nLyI+bWU8L2E+IHZpYSBnaXRodWIgYW5kIG1ha2UgYSBwdWxsIHJlcXVlc3Qgb3IgdGFsayB0byBtZSBkaXJlY3RseSA6KTwvcD48L2RkPmA7DQogICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGIuaW5uZXJIVE1MID0gIiINCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgICAgIGZvciAobGV0IGMgb2YgYSkgew0KICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOw0KICAgICAgICAgICAgICAgICAgICBkLmlubmVyVGV4dCA9IGBGcmVlemUgJHtjLm5hbWV9YDsNCiAgICAgICAgICAgICAgICAgICAgZC5vbmNsaWNrID0gKCkgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlX2lmcmFtZXMoYy51cmwpDQogICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgIGIuYXBwZW5kKGQpDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZV9pZnJhbWVzKGEpIHsNCiAgICAgICAgICAgICAgICBsZXQgYiA9IFtdOw0KICAgICAgICAgICAgICAgIGxldCBjID0gNTsNCiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkgew0KICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlmcmFtZSIpOw0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChkKTsNCiAgICAgICAgICAgICAgICAgICAgYi5wdXNoKGQpOw0KICAgICAgICAgICAgICAgICAgICBsZXQgZSA9IE1hdGgubWF4KDIsIDIwMCAtIGMpOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBmID0gMDsgZiA8IDUwOyBmKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaWZyYW1lIik7DQogICAgICAgICAgICAgICAgICAgICAgICBnLnNyYyA9IGE7DQogICAgICAgICAgICAgICAgICAgICAgICBnLnN0eWxlLndpZHRoID0gZy5zdHlsZS5oZWlnaHQgPSAiMXB4IjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGQuY29udGVudERvY3VtZW50LmJvZHkuYXBwZW5kKGcpDQogICAgICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICAgICAgICAgIHdoaWxlIChiLmxlbmd0aCA+IE1hdGgubWF4KDMsIDEwIC0gYykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJbMF0ucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICBiLnNoaWZ0KCkNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgYysrDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgICAgIHdpbmRvdy5vbmxvYWQgPSBtYWluDQogICAgICAgIDwvc2NyaXB0Pg0KICAgIDwvYm9keT4NCjwvaHRtbD4=
